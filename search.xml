<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序设计语言原理复习（2）]]></title>
    <url>%2F2019%2F01%2F02%2F%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[Chapter 5 Names, Bindings, Type Checking, and Scopes(作用域)Variables 变量 1.A variable is an abstraction of a memory cel变量是存储单元 2.Variables can be characterized as a sextuple(六个部分) of attributes:（name, address, value, type, lifetime（生存周期）, scope（作用域）)刻画一个变量 的6个特征 Binding 绑定 The l-value of a variable is its address左值是地址 The r-value of a variable is its value右值是数值 Def: A binding is an association(关联), such as between an attribute(属性) and an entity, or between an operation and a symbol. Def: Binding time is the time at which a binding takes place. Possible binding times:Language design time–e.g., bind operator symbols to operations. (+)语言设计时Language implementation time–e.g., bind data type to a range of possible value. (integer)语言实现时Compile time–e.g., bind a variable to a type in C or Java.编译时Link time—a call to a library subprogram is bound o the subprogram code连接时Load time–e.g., bind a FORTRAN 77 variable to a memory cell (or a C static variable).载入时Runtime–e.g., bind a non-static local variable to a memory cell.运行时 Binding of Attributes to variablesDef: A binding is static if it first occurs before run time and remains unchanged throughout program execution. Def: A binding is dynamic if it first occurs during execution or can change during execution of the program. Storage Bindings &amp; Lifetime5.1 Static–bound to memory cells before execution begins and remains bound to the same memory cell throughout execution静态绑定在执行开始之前绑定到存储器单元，并在整个执行期间保持绑定到同一存储器单元。 Advantages: efficiency (direct addressing)直接寻址, history-sensitive subprogram support Disadvantage: lack of flexibility (no recursion)没有递归 The storage cannot be shared among variables.5.2 Stack-dynamic–Storage bindings are created for variables when their declaration statements are elaborated（描述）. Advantage: allows recursion; Disadvantages: Overhead of allocation and deallocation(解除分配)分配和解除分配的开销（解除分配） Subprograms cannot be history sensitive 子程序不能对历史敏感 Inefficient references (indirect addressing) 效率低下的引用（间接寻址）5.3 Explicit heap-dynamic–Allocated and deallocated by explicit directives, specified by the programmer, which take effect during execution 显式堆动态 - 由程序员指定的显式指令分配和取消分配，这些指令在执行期间生效 Referenced only through pointers or references e.g. dynamic objects in C++ (via new and delete) all objects in Java dvantage: provides for dynamic storage management动态存储 Disadvantage: inefficient and unreliable效率低下不可靠5.4 Implicit heap-dynamic–Allocation and deallocation caused by assignment statements 隐式堆动态 - 赋值语句引起的分配和释放 e.g. all variables in APL; all strings and arrays in Perl and JavaScript Advantage: flexibility Disadvantages: Inefficient, because all attributes are dynamic Loss of error detection 效率低下，因为所有属性都是动态的 丢失错误检测 Type CheckingType checking is the activity of ensuring that the operands of an operator are of compatible types 类型检查是确保运算符的操作数是兼容类型的活动 Strong TypingAdvantage of strong typing: allows the detection of the misuses of variables that result in type errors 强化类型的优点：允许检测导致类型错误的变量的误用 Type Compatibility 等价类型 Name type compatibility 按名等价 Name type compatibility means the two variables have compatible types if they are in either the same declaration or in declarations that use the same type name 名称类型兼容性是指两个变量具有兼容类型（如果它们位于相同的声明中或使用相同类型名称的声明中） declaration equivalence 按定义等价 两个变量具有按定义等价的类型当且仅当两个变量有完全相同的类型（包括相同的域名） Structure type compatibility 按结构等价 两个变量的类型具有相同的（一样）结构，则它们具有兼容的类型 更灵活，但更难实施 Scope 作用域 静态作用域静态作用域又分为两类，一类是子程序可以嵌套，一类是不可以嵌套 动态作用域动态作用域基于子程序的调用序列，而不是基于作用域互相之间的空间关系。因此动态作用域只能在运行时得已确定。]]></content>
      <tags>
        <tag>Final Review</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序设计语言原理复习（1）]]></title>
    <url>%2F2019%2F01%2F01%2Ffianl_tset%20review2%2F</url>
    <content type="text"><![CDATA[Chapter 1: Preliminaries(基本概念)Motivation 1.增进思想表达的能力 2.增强选择适用语言的能力 3.增强学习新的语言的呢能力 4.更好的理解现实的重要性 5.更好的使用已知语言 6.促进整个计算机科学的发展 Programming Domains(领域) 可以用科学，商务，人工智能，程序设计，万维网语言 Language Evaluation Criteria(语言评估标准)//重点 1.可读性 包括简单整体性 正交性 控制语句 数据类型与数据结构 语法设计 其中正交性：指只用该语言的一组相对少量的基本结构，经过相对少的结合步骤，就可构成该语言的控制结构和数据结构。而且，它的基本结构的任何组合都是合法和有意义的 2.可写性 简单性与正交性 支持抽象 表达性 3.可靠性 类型检测 异常处理 使用别名 可读性与可写性 4.代价 Influences on Language Design(影响语言设计的因素)//重点 1.计算机体系结构 2.程序设计方法 Language Categories(语言分类) 1.Imperative(命令式) -Central features are variables, assignment statements, and iteration -C, Pascal 2.Functional -Main means of making computations is by applying functions to given parameters -LISP, Scheme 3.Logic(逻辑式) -Rule-based -Rules are specified in no special order -Prolog 4.Object-oriented(面向对象) -Encapsulate data objects with processing Inheritance and dynamic type binding Grew out of imperative languages -C++, Java Chapter 2: Evolution of the major programming languagesThe IBM 704 and FORTRAN 概要：Designed for the new IBM 704, which had index registers（索引寄存器）and floating point hardware（浮点硬件) Environment of development -Computers were small and unreliable（计算机很小，不可靠） -Applications were scientific（应用是科学的） -No programming methodology or tools（没有编程方法或工具） -Machine efficiency was most important（机器效率最重要） The First Step Toward Sophistication: ALGOL 60 new feature: Block structure (local scope)块结构 Two parameter passing methods (pass by value and pass by name)两种不同方式经行子程序的参数传递 Subprogram recursion 递归 Stack-dynamic arrays 栈动态数组 Still no I/O and no string handling缺乏输入与输出 导致ALGOL无法被广泛应用 The Beginning of Data Abstraction: SIMULA 67 Designed primarily for system simulation(仿真) in Norway by Nygaard and Dahl Based on ALGOL 60 and SIMULA I Primary Contributions： Co-routines(协同程序) - a kind of subprogram Implemented in a structure called a class Classes are the basis for data abstraction Classes are structures that include both local data and functionality History’s Largest Design Effort: Ada 最大规模的语言设计 Contributions Packages - support for data abstraction提供数据的封装 Exception handling - elaborate (详细描述)异常处理机制 Generic program units程序单元通用 Concurrency - through the tasking model 提供并发 Object-Oriented Programming: Smalltalk 面向对象的程序设计 First full implementation of an object-oriented language (data abstraction, inheritance, and dynamic type binding)首先完全实现面向对象的语言（数据抽象，继承和动态类型绑定）]]></content>
      <tags>
        <tag>Final Review</tag>
      </tags>
  </entry>
</search>
